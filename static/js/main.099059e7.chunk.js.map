{"version":3,"sources":["components/pages/basics/DecBinRow.js","components/pages/basics/LogicCard.js","routes.js","components/pages/basics/Basics.js","components/layout/header/Header.js","components/layout/footer/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["DecBinRow","props","name","dec","onChange","onChangeBin","e","i","val","parseInt","target","value","isNaN","alert","bin","converDecToBin8bitString","split","join","newDec","handleShift","direction","n","toString","padStart","substr","className","htmlFor","type","id","map","b","onClick","LogicCard","nameA","nameB","valueA","valueB","operation","useState","decArr","setDecArr","title","setTitle","useEffect","newDecimalArray","push","result","d","j","routes","path","component","to","numA","setNumA","numB","setNumB","Header","Footer","Date","getFullYear","App","basename","r","exact","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.099059e7.chunk.js","sourcesContent":["\r\nconst DecBinRow = props => {\r\n    const { name, dec, onChange } = props\r\n\r\n    /**\r\n     * Whenever user types in decimal field.\r\n     * @param {*} e \r\n     */\r\n    const onChangeDec = e => {\r\n        const newDec = parseInt(e.target.value)\r\n        if(isNaN(newDec)) return\r\n\r\n        else if(newDec < 0 || newDec > 255) return alert('The decimal number must be in the range 0 <= n <= 255')\r\n\r\n        else onChange(newDec)\r\n    }\r\n\r\n    /**\r\n     * Whenever user changes in one of bin fields\r\n     * @param {*} e | event\r\n     * @param {*} i | Index of the field corresponding to binary array\r\n     */\r\n    const onChangeBin = (e, i) => {\r\n        const val = parseInt(e.target.value)\r\n        if( isNaN(val) || val < 0 || val > 1 ) return alert('A binary digit must be either 0 or 1')\r\n\r\n        let bin = converDecToBin8bitString(dec).split('')\r\n        bin[i] = val\r\n        bin = bin.join('')\r\n\r\n        const newDec = parseInt(bin, 2)\r\n        onChange(newDec)\r\n    }\r\n\r\n    /**\r\n     * Binary Shift Operator\r\n     * @param {*} direction | 'LEFT' or 'RIGHT'\r\n     */\r\n    const handleShift = direction => {\r\n        const newDec = direction === 'LEFT' ? dec << 1 : dec >> 1\r\n        onChange(newDec)\r\n    }\r\n\r\n    /**\r\n     * Supply it a decimal integer and\r\n     * it will return an 8 bit binary string\r\n     * @param {*} n \r\n     */\r\n    const converDecToBin8bitString = n => n.toString(2).padStart(8, '0').substr(0, 8)\r\n\r\n    return (\r\n        <div className=\"row dec-bin-row shadow\">\r\n            <div className=\"col-sm-12 col-md-2 name\">{name}</div>\r\n            <div className=\"col-sm-12 col-md-2\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor={'decimal'+name}>Dec</label>\r\n                    <input type=\"text\" \r\n                        className=\"form-control\" \r\n                        id={'decimal'+name} \r\n                        value={dec} \r\n                        onChange={onChangeDec}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"col-sm-12 col-md-8 d-flex binaries\">\r\n                {\r\n                    converDecToBin8bitString(dec).split('').map( (b, i) =>\r\n                    <div className=\"form-group mr-2\" key={i}>\r\n                        <label htmlFor={`bits-${name}-${7-i}`}>2<sup>{7-i}</sup></label>\r\n                        <input \r\n                            type=\"text\" \r\n                            className=\"form-control\" \r\n                            id={`bits-${name}-${8-i}`} \r\n                            value={b} \r\n                            onChange={e => onChangeBin(e, i)}\r\n                        />\r\n                    </div>\r\n                    )\r\n                }\r\n                \r\n            </div>\r\n            <div className=\"col-sm-12 btn-panel\">\r\n                <button \r\n                    type=\"button\" \r\n                    className=\"btn btn-primary\" \r\n                    onClick={() => handleShift('LEFT')}\r\n                >\r\n                    <i className=\"fas fa-angle-double-left\"></i> Left Shift \r\n                </button>\r\n                <button \r\n                    type=\"button\" \r\n                    className=\"btn btn-primary ml-2\"\r\n                    onClick={() => handleShift('RIGHT')}\r\n                > \r\n                    Right Shift <i className=\"fas fa-angle-double-right\"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DecBinRow","import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Supply it a decimal integer and\r\n * it will return an 8 bit binary string\r\n * @param {*} n \r\n */\r\nconst converDecToBin8bitString = n => n.toString(2).padStart(8, '0').substr(0, 8)\r\n\r\n\r\nconst LogicCard = props => {\r\n    const { nameA, nameB, valueA, valueB, operation } = props\r\n    const [decArr, setDecArr] = useState([0, 0, 0])\r\n    const [title, setTitle] = useState('')\r\n    const binIndex = [7, 6, 5, 4, 3, 2, 1, 0]\r\n\r\n    useEffect(() => {\r\n        const newDecimalArray = []\r\n        newDecimalArray.push(isNaN(valueA) ? 0 : valueA)\r\n        newDecimalArray.push(isNaN(valueB) ? 0 : valueB)\r\n        let result = 0\r\n        if (operation === 'AND') {\r\n            result = newDecimalArray[0] & newDecimalArray[1]\r\n            setTitle(`${nameA} & ${nameB}`)\r\n        }\r\n        else if (operation === 'OR') {\r\n            result = newDecimalArray[0] | newDecimalArray[1]\r\n            setTitle(`${nameA} | ${nameB}`)\r\n        }\r\n        else if (operation === 'XOR') {\r\n            result = newDecimalArray[0] ^ newDecimalArray[1]\r\n            setTitle(`${nameA} ^ ${nameB}`)\r\n        }\r\n\r\n        newDecimalArray.push(result)\r\n        setDecArr(newDecimalArray)\r\n    }, \r\n    [valueA, valueB])\r\n\r\n    return (\r\n        <div className=\"row logic-card shadow\">\r\n            <div className=\"col-sm-12 overflow-auto\">\r\n                <div className=\"title\">{title}</div>\r\n                <table className=\"table table-bordered\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>D</th>\r\n                        {\r\n                            binIndex.map(i => <th>2<sup>{i}</sup></th>)\r\n                        }\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        decArr.map((d, i) => \r\n                        <tr key={i}>\r\n                            <td>{d}</td>\r\n                            {\r\n                                converDecToBin8bitString(d).split('').map((b,j) => \r\n                                <td key={j}>{b}</td>\r\n                                )\r\n                            }\r\n                        </tr>)\r\n                    }\r\n                </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default LogicCard","import { Basics } from './components/pages'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nconst routes = [\r\n    {\r\n        path: '/',\r\n        component: () => <Redirect to=\"/basics\" />\r\n    },\r\n    {\r\n        path: '/basics',\r\n        component: Basics\r\n    },\r\n    {\r\n        path: '/**',\r\n        component: () => <Redirect to=\"/\" />\r\n    }\r\n]\r\n\r\nexport default routes","import { useState } from 'react'\r\nimport DecBinRow from './DecBinRow'\r\nimport LogicCard from './LogicCard'\r\n\r\nconst Basics = props => {\r\n    const [numA, setNumA] = useState(2)\r\n    const [numB, setNumB] = useState(7)\r\n\r\n    return (\r\n        <div>\r\n            <DecBinRow \r\n                name=\"A\" \r\n                dec={numA} \r\n                onChange={setNumA} \r\n            />\r\n            <DecBinRow \r\n                name=\"B\" \r\n                dec={numB} \r\n                onChange={setNumB} \r\n            />\r\n\r\n            {/* <div className=\"row\"> */}\r\n                <LogicCard \r\n                    nameA=\"A\"\r\n                    nameB=\"B\"\r\n                    valueA={numA}\r\n                    valueB={numB}\r\n                    operation=\"AND\"\r\n                />\r\n                <LogicCard \r\n                    nameA=\"A\"\r\n                    nameB=\"B\"\r\n                    valueA={numA}\r\n                    valueB={numB}\r\n                    operation=\"OR\"\r\n                />\r\n                <LogicCard \r\n                    nameA=\"A\"\r\n                    nameB=\"B\"\r\n                    valueA={numA}\r\n                    valueB={numB}\r\n                    operation=\"XOR\"\r\n                />\r\n            {/* </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Basics","const Header = props => {\r\n    return (\r\n        <div className=\"header shadow\">\r\n            <span className=\"logo-text\">Visual Bits</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","const Footer = props => {\r\n    return (\r\n        <div className=\"footer\">\r\n            &copy; Suman Barick 2020-{(new Date()).getFullYear()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport routes from './routes'\r\nimport { Header, Footer } from './components/layout'\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      \r\n      <header>\r\n        <Header />\r\n      </header>\r\n\r\n      <div className=\"main-container container-fluid\">\r\n        <Router basename=\"/visual-bits\">\r\n          <Switch>\r\n            {\r\n              routes.map(r => <Route {...r} exact key={r.path} />)\r\n            }\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n\r\n      <footer>\r\n        <Footer />\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}