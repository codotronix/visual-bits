{"version":3,"sources":["components/pages/basics/DecBinRow.js","routes.js","components/pages/basics/Basics.js","components/layout/header/Header.js","App.js","reportWebVitals.js","index.js"],"names":["DecBinRow","props","name","dec","onChange","onChangeBin","e","i","val","parseInt","target","value","isNaN","alert","bin","converDecToBin8bitString","split","join","newDec","handleShift","direction","n","toString","padStart","substr","className","htmlFor","type","id","map","b","clsx","onClick","routes","path","component","to","useState","numA","setNumA","numB","setNumB","Header","App","basename","r","exact","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec4ea94f.chunk.js","sourcesContent":["import clsx from 'clsx'\r\n\r\nconst DecBinRow = props => {\r\n    const { name, dec, onChange } = props\r\n\r\n    /**\r\n     * Whenever user types in decimal field.\r\n     * @param {*} e \r\n     */\r\n    const onChangeDec = e => {\r\n        const newDec = parseInt(e.target.value)\r\n        if(isNaN(newDec)) return\r\n\r\n        else if(newDec < 0 || newDec > 255) return alert('The decimal number must be in the range 0 <= n <= 255')\r\n\r\n        else onChange && onChange(newDec)\r\n    }\r\n\r\n    /**\r\n     * Whenever user changes in one of bin fields\r\n     * @param {*} e | event\r\n     * @param {*} i | Index of the field corresponding to binary array\r\n     */\r\n    const onChangeBin = (e, i) => {\r\n        const val = parseInt(e.target.value)\r\n        if( isNaN(val) || val < 0 || val > 1 ) return alert('A binary digit must be either 0 or 1')\r\n\r\n        let bin = converDecToBin8bitString(dec).split('')\r\n        bin[i] = val\r\n        bin = bin.join('')\r\n\r\n        const newDec = parseInt(bin, 2)\r\n        onChange && onChange(newDec)\r\n    }\r\n\r\n    /**\r\n     * Binary Shift Operator\r\n     * @param {*} direction | 'LEFT' or 'RIGHT'\r\n     */\r\n    const handleShift = direction => {\r\n        const newDec = direction === 'LEFT' ? dec << 1 : dec >> 1\r\n        onChange && onChange(newDec)\r\n    }\r\n\r\n    /**\r\n     * Supply it a decimal integer and\r\n     * it will return an 8 bit binary string\r\n     * @param {*} n \r\n     */\r\n    const converDecToBin8bitString = n => n.toString(2).padStart(8, '0').substr(0, 8)\r\n\r\n    return (\r\n        <div className=\"row dec-bin-row shadow\">\r\n            <div className=\"col-sm-12 col-md-2 name\">{name}</div>\r\n            <div className=\"col-sm-12 col-md-2\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor={'decimal'+name}>Dec</label>\r\n                    <input type=\"text\" \r\n                        className=\"form-control\" \r\n                        id={'decimal'+name} \r\n                        value={dec} \r\n                        onChange={onChangeDec}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"col-sm-12 col-md-8 d-flex binaries\">\r\n                {\r\n                    converDecToBin8bitString(dec).split('').map( (b, i) =>\r\n                    <div className=\"form-group mr-2\" key={i}>\r\n                        <label htmlFor={`bits-${name}-${7-i}`}>2<sup>{7-i}</sup></label>\r\n                        <input \r\n                            type=\"text\" \r\n                            className=\"form-control\" \r\n                            id={`bits-${name}-${8-i}`} \r\n                            value={b} \r\n                            onChange={e => onChangeBin(e, i)}\r\n                        />\r\n                    </div>\r\n                    )\r\n                }\r\n                \r\n            </div>\r\n            <div className={clsx(\"col-sm-12 btn-panel\", !onChange && 'd-none')}>\r\n                <button \r\n                    type=\"button\" \r\n                    className=\"btn btn-primary\" \r\n                    onClick={() => handleShift('LEFT')}\r\n                >\r\n                    <i className=\"fas fa-angle-double-left\"></i> Left Shift \r\n                </button>\r\n                <button \r\n                    type=\"button\" \r\n                    className=\"btn btn-primary ml-2\"\r\n                    onClick={() => handleShift('RIGHT')}\r\n                > \r\n                    Right Shift <i className=\"fas fa-angle-double-right\"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DecBinRow","import { Basics } from './components/pages'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nconst routes = [\r\n    {\r\n        path: '/',\r\n        component: () => <Redirect to=\"/basics\" />\r\n    },\r\n    {\r\n        path: '/basics',\r\n        component: Basics\r\n    },\r\n    {\r\n        path: '/**',\r\n        component: () => <Redirect to=\"/\" />\r\n    }\r\n]\r\n\r\nexport default routes","import { useState } from 'react'\r\nimport DecBinRow from './DecBinRow'\r\n\r\nconst Basics = props => {\r\n    const [numA, setNumA] = useState(2)\r\n    const [numB, setNumB] = useState(7)\r\n\r\n    return (\r\n        <div>\r\n            <DecBinRow \r\n                name=\"A\" \r\n                dec={numA} \r\n                onChange={setNumA} \r\n            />\r\n            <DecBinRow \r\n                name=\"B\" \r\n                dec={numB} \r\n                onChange={setNumB} \r\n            />\r\n            <DecBinRow \r\n                name=\"A & B\" \r\n                dec={numA&numB} \r\n                // onChange={setNumB} \r\n            />\r\n            <DecBinRow \r\n                name=\"A | B\" \r\n                dec={numA|numB} \r\n                // onChange={setNumB} \r\n            />\r\n            <DecBinRow \r\n                name=\"A ^ B\" \r\n                dec={numA^numB} \r\n                // onChange={setNumB} \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Basics","const Header = props => {\r\n    return (\r\n        <div className=\"header shadow\">\r\n            <span className=\"logo-text\">Visual Bits</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport routes from './routes'\r\nimport { Header } from './components/layout'\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      \r\n      <header>\r\n        <Header />\r\n      </header>\r\n\r\n      <div className=\"main-container container-fluid\">\r\n        <Router basename=\"/visual-bits\">\r\n          <Switch>\r\n            {\r\n              routes.map(r => <Route {...r} exact key={r.path} />)\r\n            }\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}