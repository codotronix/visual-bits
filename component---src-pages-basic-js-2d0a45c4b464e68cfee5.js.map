{"version":3,"sources":["webpack:///./src/components/DecBinRow.js","webpack:///./src/components/LogicCard.js","webpack:///./src/pages/basic.js"],"names":["DecBinRow","props","name","dec","onChange","onChangeBin","e","i","val","parseInt","target","value","isNaN","alert","bin","converDecToBin8bitString","split","join","newDec","handleShift","direction","n","toString","padStart","substr","className","htmlFor","type","id","map","b","key","onClick","LogicCard","nameA","nameB","valueA","valueB","operation","useState","decArr","setDecArr","title","setTitle","useEffect","newDecimalArray","push","result","d","j","Basic","numA","setNumA","numB","setNumB"],"mappings":"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","file":"component---src-pages-basic-js-2d0a45c4b464e68cfee5.js","sourcesContent":["import React from 'react'\r\nconst DecBinRow = props => {\r\n    const { name, dec, onChange } = props\r\n\r\n    /**\r\n     * Whenever user types in decimal field.\r\n     * @param {*} e \r\n     */\r\n    const onChangeDec = e => {\r\n        const newDec = parseInt(e.target.value)\r\n        if(isNaN(newDec)) return\r\n\r\n        else if(newDec < 0 || newDec > 255) return alert('The decimal number must be in the range 0 <= n <= 255')\r\n\r\n        else onChange(newDec)\r\n    }\r\n\r\n    /**\r\n     * Whenever user changes in one of bin fields\r\n     * @param {*} e | event\r\n     * @param {*} i | Index of the field corresponding to binary array\r\n     */\r\n    const onChangeBin = (e, i) => {\r\n        const val = parseInt(e.target.value)\r\n        if( isNaN(val) || val < 0 || val > 1 ) return alert('A binary digit must be either 0 or 1')\r\n\r\n        let bin = converDecToBin8bitString(dec).split('')\r\n        bin[i] = val\r\n        bin = bin.join('')\r\n\r\n        const newDec = parseInt(bin, 2)\r\n        onChange(newDec)\r\n    }\r\n\r\n    /**\r\n     * Binary Shift Operator\r\n     * @param {*} direction | 'LEFT' or 'RIGHT'\r\n     */\r\n    const handleShift = direction => {\r\n        const newDec = direction === 'LEFT' ? dec << 1 : dec >> 1\r\n        onChange(newDec)\r\n    }\r\n\r\n    /**\r\n     * Supply it a decimal integer and\r\n     * it will return an 8 bit binary string\r\n     * @param {*} n \r\n     */\r\n    const converDecToBin8bitString = n => n.toString(2).padStart(8, '0').substr(0, 8)\r\n\r\n    return (\r\n        <div className=\"row dec-bin-row shadow\">\r\n            <div className=\"col-sm-12 col-md-2 name\">{name}</div>\r\n            <div className=\"col-sm-12 col-md-2\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor={'decimal'+name}>Dec</label>\r\n                    <input type=\"text\" \r\n                        className=\"form-control\" \r\n                        id={'decimal'+name} \r\n                        value={dec} \r\n                        onChange={onChangeDec}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"col-sm-12 col-md-8 d-flex binaries\">\r\n                {\r\n                    converDecToBin8bitString(dec).split('').map( (b, i) =>\r\n                    <div className=\"form-group mr-2\" key={i}>\r\n                        <label htmlFor={`bits-${name}-${7-i}`}>2<sup>{7-i}</sup></label>\r\n                        <input \r\n                            type=\"text\" \r\n                            className=\"form-control\" \r\n                            id={`bits-${name}-${8-i}`} \r\n                            value={b} \r\n                            onChange={e => onChangeBin(e, i)}\r\n                        />\r\n                    </div>\r\n                    )\r\n                }\r\n                \r\n            </div>\r\n            <div className=\"col-sm-12 btn-panel\">\r\n                <button \r\n                    type=\"button\" \r\n                    className=\"btn btn-primary\" \r\n                    onClick={() => handleShift('LEFT')}\r\n                >\r\n                    <i className=\"fas fa-angle-double-left\"></i> Left Shift \r\n                </button>\r\n                <button \r\n                    type=\"button\" \r\n                    className=\"btn btn-primary ml-2\"\r\n                    onClick={() => handleShift('RIGHT')}\r\n                > \r\n                    Right Shift <i className=\"fas fa-angle-double-right\"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DecBinRow","import React, { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Supply it a decimal integer and\r\n * it will return an 8 bit binary string\r\n * @param {*} n \r\n */\r\nconst converDecToBin8bitString = n => n.toString(2).padStart(8, '0').substr(0, 8)\r\n\r\n\r\nconst LogicCard = props => {\r\n    const { nameA, nameB, valueA, valueB, operation } = props\r\n    const [decArr, setDecArr] = useState([0, 0, 0])\r\n    const [title, setTitle] = useState('')\r\n    const binIndex = [7, 6, 5, 4, 3, 2, 1, 0]\r\n\r\n    useEffect(() => {\r\n        const newDecimalArray = []\r\n        newDecimalArray.push(isNaN(valueA) ? 0 : valueA)\r\n        newDecimalArray.push(isNaN(valueB) ? 0 : valueB)\r\n        let result = 0\r\n        if (operation === 'AND') {\r\n            result = newDecimalArray[0] & newDecimalArray[1]\r\n            setTitle(`${nameA} & ${nameB}`)\r\n        }\r\n        else if (operation === 'OR') {\r\n            result = newDecimalArray[0] | newDecimalArray[1]\r\n            setTitle(`${nameA} | ${nameB}`)\r\n        }\r\n        else if (operation === 'XOR') {\r\n            result = newDecimalArray[0] ^ newDecimalArray[1]\r\n            setTitle(`${nameA} ^ ${nameB}`)\r\n        }\r\n\r\n        newDecimalArray.push(result)\r\n        setDecArr(newDecimalArray)\r\n    }, \r\n    [valueA, valueB])\r\n\r\n    return (\r\n        <div className=\"row logic-card shadow\">\r\n            <div className=\"col-sm-12 overflow-auto\">\r\n                <div className=\"title\">{title}</div>\r\n                <table className=\"table table-bordered\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>D</th>\r\n                        {\r\n                            binIndex.map(i => <th>2<sup>{i}</sup></th>)\r\n                        }\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        decArr.map((d, i) => \r\n                        <tr key={i}>\r\n                            <td>{d}</td>\r\n                            {\r\n                                converDecToBin8bitString(d).split('').map((b,j) => \r\n                                <td key={j}>{b}</td>\r\n                                )\r\n                            }\r\n                        </tr>)\r\n                    }\r\n                </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default LogicCard","import React, { useState } from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport DecBinRow from '../components/DecBinRow'\r\nimport LogicCard from '../components/LogicCard'\r\n\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\n\r\nconst Basic = () => {\r\n  const [numA, setNumA] = useState(2)\r\n  const [numB, setNumB] = useState(7)\r\n  \r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Bits Basic Opeations\" />\r\n      <div>\r\n        <DecBinRow\r\n          name=\"A\"\r\n          dec={numA}\r\n          onChange={setNumA}\r\n        />\r\n        <DecBinRow\r\n          name=\"B\"\r\n          dec={numB}\r\n          onChange={setNumB}\r\n        />\r\n\r\n        {/* <div className=\"row\"> */}\r\n        <LogicCard\r\n          nameA=\"A\"\r\n          nameB=\"B\"\r\n          valueA={numA}\r\n          valueB={numB}\r\n          operation=\"AND\"\r\n        />\r\n        <LogicCard\r\n          nameA=\"A\"\r\n          nameB=\"B\"\r\n          valueA={numA}\r\n          valueB={numB}\r\n          operation=\"OR\"\r\n        />\r\n        <LogicCard\r\n          nameA=\"A\"\r\n          nameB=\"B\"\r\n          valueA={numA}\r\n          valueB={numB}\r\n          operation=\"XOR\"\r\n        />\r\n        {/* </div> */}\r\n      </div>\r\n    </Layout>\r\n  )\r\n\r\n}\r\n\r\nexport default Basic\r\n"],"sourceRoot":""}